{
  "_args": [
    [
      {
        "raw": "nf",
        "scope": null,
        "escapedName": "nf",
        "name": "nf",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/emilianoponce/Development Projects/my-app"
    ]
  ],
  "_from": "nf@latest",
  "_id": "nf@0.0.3",
  "_inCache": true,
  "_location": "/nf",
  "_npmUser": {
    "name": "tjfontaine",
    "email": "tjfontaine@gmail.com"
  },
  "_npmVersion": "1.2.32",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nf",
    "scope": null,
    "escapedName": "nf",
    "name": "nf",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/nf/-/nf-0.0.3.tgz",
  "_shasum": "b0f135fb442605baccbd989674e0470771c9265e",
  "_shrinkwrap": null,
  "_spec": "nf",
  "_where": "/Users/emilianoponce/Development Projects/my-app",
  "author": {
    "name": "Timothy J Fontaine",
    "email": "tjfontaine@gmail.com",
    "url": "http://atxconsulting.com"
  },
  "bin": {
    "nf": "nf.js"
  },
  "bugs": {
    "url": "http://github.com/tjfontaine/node-nf/issues"
  },
  "dependencies": {
    "lstream": ">= 0.0.1"
  },
  "description": "Node CLI Filter -- Do one liners easier",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "b0f135fb442605baccbd989674e0470771c9265e",
    "tarball": "https://registry.npmjs.org/nf/-/nf-0.0.3.tgz"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "homepage": "http://github.com/tjfontaine/node-nf",
  "keywords": [
    "line",
    "cli",
    "command line",
    "filter",
    "perl"
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "tjfontaine",
      "email": "tjfontaine@gmail.com"
    }
  ],
  "name": "nf",
  "optionalDependencies": {},
  "readme": "# nf\n\nIf you've used perl oneliners before you're expecting when you pass `-pe` to\nnode that you'll evaluate the script once per input line\n\n\n```\n$ echo -e \"foo\\nbar\" | perl -pe '\"baz\"'\nfoo\nbar\n```\n\nHowever if you try it:\n\n```\n$ echo -e \"foo\\nbar\" | node -pe '\"baz\"'\nbaz\n```\n\n`nf` is a small package that lets you perform arbitrary javascript/node actions\nonce per input line:\n\n```\n$ npm install -g nf\n$ echo -e \"foo\\nbar\" | nf -pe '\"baz\"'\nbaz\nbaz\n```\n\nValid command line arguments:\n\n * `-e` -- evaluate the given script (if not passed assumes last argument is\na javascript file to load)\n * `-n` -- evaluate the given script once per input line, the current line is\navailable in the global `__line`\n * `-p` -- evaluate the given script once per input line with an implicit print\nof the return value (implies `-n`)\n\nHere's a small example interpreting the current line\n\n```\n$ echo -e \"foo\\nbaz\\nfoobar\" | nf -pe '__line.replace(/foo/, \"bar\")'\nbar\nbaz\nbarbar\n```\n\nHere is `apache.js` which transforms an apache log line to json:\n\n```javascript\nvar pattern = /^(\\S+)\\s+(\\S+)\\s+(\\S+)\\s+\\[(.+)\\]\\s+(.+)\\s+(.+)\\s+(HTTP\\/\\d+.\\d+)\\s+\"(\\d+)\"\\s+(\\S+)\\s+\"(.*)\"\\s+\"(.*)\"\\s+\"(.*)\"$/;\n\n(function(line) {\n  var m = line.match(pattern);\n\n  if (!m) return JSON.stringify({});\n\n  var obj = {\n    host: m[1],\n    a: m[2],\n    user: m[3],\n    date: m[4],\n    method: m[5],\n    url: m[6],\n    version: m[7],\n    statusCode: m[8],\n    contentLength: m[9],\n    refer: m[10],\n    userAgent: m[11],\n  };\n\n  return JSON.stringify(obj);\n})(__line);\n```\n\nthen using [jsontool](http://npmjs.org/package/jsontool) you can find the `uniq` userAgents\n\n\n```\ncat access.log | nf -p ./apache.js | json -ga userAgent | sort -r | uniq | head 10\nMozilla/5.0 (X11; Ubuntu; Linux i686; rv:21.0) Gecko/20100101 Firefox/21.0\nMozilla/5.0 (Windows NT 6.1; WOW64; rv:21.0) Gecko/20100101 Firefox/21.0\nMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.110 Safari/537.36\nMozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31\nMozilla/5.0 (Windows NT 5.1) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.64 Safari/537.31\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/536.30.1 (KHTML, like Gecko) Version/6.0.5 Safari/536.30.1\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.37 Safari/537.36\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.110 Safari/537.36\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.110 Safari/537.36\nMozilla/4.0 (compatible;)\n```\n\n## scripts\n\nScripts (either in string form or from a file) are not the same thing as a node\nmodule; most but not all the globals you expect are there. You can `require` in\nyour script, but notably `exports` and `module` are missing as their utility\nwould be suspect.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/tjfontaine/node-nf.git"
  },
  "version": "0.0.3"
}
